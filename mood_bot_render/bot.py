import logging
import os
import traceback
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

# Load env variables
load_dotenv("mood_bot.env")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
FOURSQUARE_API_KEY = os.getenv("FOURSQUARE_API_KEY")

# Logging
logging.basicConfig(level=logging.INFO)

# Webhook settings
WEBHOOK_HOST = "https://mood-bot-frbb.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

# Init bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

user_last_query = {}

# Keyboard
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω"),
    KeyboardButton("üé¨ –ö–∏–Ω–æ")
)
main_kb.add(
    KeyboardButton("üé≠ –¢–µ–∞—Ç—Ä"),
    KeyboardButton("üñº –ú—É–∑–µ–π")
)
main_kb.add(
    KeyboardButton("ü§∑‚Äç‚ôÇÔ∏è –ú–Ω–µ —Å–∫—É—á–Ω–æ"),
    KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)

async def search_foursquare_places(lat, lon, query, message):
    try:
        headers = {
            "Authorization": FOURSQUARE_API_KEY,
            "Accept": "application/json"
        }
        params = {
            "ll": f"{lat},{lon}",
            "query": query,
            "limit": 5,
            "sort": "RELEVANCE",
            "radius": 3000  # ‚Üê –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–≤ –º–µ—Ç—Ä–∞—Ö)
        }
        url = "https://api.foursquare.com/v3/places/search"

        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers, params=params)
            data = response.json()

        if "results" not in data or not data["results"]:
            await message.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ üòï", reply_markup=main_kb)
            return

        for place in data["results"]:
            name = place.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            location = place.get("location", {})
            address = location.get("formatted_address", "–ê–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            lat = location.get("lat")
            lon = location.get("lng")
            maps_url = f"https://maps.google.com/?q={lat},{lon}"
            rating = place.get("rating", "‚Äî")
            text = f"üìç <b>{name}</b>\nüìç {address}\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n<a href='{maps_url}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>"
            await message.reply(text, parse_mode="HTML", reply_markup=main_kb)

        await message.reply("üîÅ –•–æ—á–µ—à—å –ø–æ–∏—Å–∫–∞—Ç—å –µ—â—ë? –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ üëá", reply_markup=main_kb)

    except Exception:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ üòû", reply_markup=main_kb)
        logging.error("Foursquare Error:\n" + traceback.format_exc())

@dp.message_handler(content_types=types.ContentType.LOCATION)
async def handle_location(message: types.Message):
    lat = message.location.latitude
    lon = message.location.longitude
    user_id = message.from_user.id
    query = user_last_query.get(user_id, "restaurant")
    await message.reply(f"üîé –ò—â—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏: {query}", reply_markup=main_kb)
    await search_foursquare_places(lat, lon, query, message)

@dp.message_handler()
async def handle_text(message: types.Message):
    text = message.text.lower()
    user_id = message.from_user.id

    if "—Ä–µ—Å—Ç–æ—Ä–∞–Ω" in text:
        user_last_query[user_id] = "restaurant"
        await message.reply("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å ‚Äî –∏ —è –Ω–∞–π–¥—É –ª—É—á—à–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º üìç", reply_markup=main_kb)
    elif "–∫–∏–Ω–æ" in text:
        user_last_query[user_id] = "cinema"
        await message.reply("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å ‚Äî –∏ —è –Ω–∞–π–¥—É –∫–∏–Ω–æ —Ä—è–¥–æ–º üé¨", reply_markup=main_kb)
    elif "—Ç–µ–∞—Ç—Ä" in text:
        user_last_query[user_id] = "theatre"
        await message.reply("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å ‚Äî –∏ —è –Ω–∞–π–¥—É —Ç–µ–∞—Ç—Ä —Ä—è–¥–æ–º üé≠", reply_markup=main_kb)
    elif "–º—É–∑–µ–π" in text:
        user_last_query[user_id] = "museum"
        await message.reply("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å ‚Äî –∏ —è –Ω–∞–π–¥—É –º—É–∑–µ–π —Ä—è–¥–æ–º üñº", reply_markup=main_kb)
    elif "—Å–∫—É—á–Ω–æ" in text:
        await message.reply("–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –º–µ–Ω—é –∏ –ø—Ä–æ–≤–µ–¥–∏ –≤—Ä–µ–º—è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º!", reply_markup=main_kb)
    else:
        query = user_last_query.get(user_id)
        if not query:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Å—É–≥–∞ –∏–∑ –º–µ–Ω—é –≤—ã—à–µ ‚òùÔ∏è", reply_markup=main_kb)
            return

        try:
            headers = {"User-Agent": "MoodBot"}
            url = f"https://nominatim.openstreetmap.org/search?q={text}&format=json&limit=1"
            async with httpx.AsyncClient() as client:
                resp = await client.get(url, headers=headers)
                results = resp.json()

            if not results:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å üó∫", reply_markup=main_kb)
                return

            lat = float(results[0]["lat"])
            lon = float(results[0]["lon"])
            await message.reply(f"üìç –ù–∞—à—ë–ª: {results[0]['display_name']}\nüîé –ò—â—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏: {query}", reply_markup=main_kb)
            await search_foursquare_places(lat, lon, query, message)

        except Exception:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è üòû", reply_markup=main_kb)
            logging.error("GeoText Error:\n" + traceback.format_exc())

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
