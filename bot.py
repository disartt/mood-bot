import logging
import os
import traceback
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

# Load env variables
load_dotenv("mood_bot.env")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# Logging
logging.basicConfig(level=logging.INFO)

# Webhook settings
WEBHOOK_HOST = "https://mood-bot-frbb.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

# Init bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
user_last_query = {}

# –ö–Ω–æ–ø–∫–∏
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω"),
    KeyboardButton("üé¨ –ö–∏–Ω–æ")
)
main_kb.add(
    KeyboardButton("üé≠ –¢–µ–∞—Ç—Ä"),
    KeyboardButton("üñº –ú—É–∑–µ–π")
)
main_kb.add(
    KeyboardButton("ü§∑‚Äç‚ôÇÔ∏è –ú–Ω–µ —Å–∫—É—á–Ω–æ"),
    KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)

@dp.message_handler(content_types=types.ContentType.LOCATION)
async def handle_location(message: types.Message):
    lat = message.location.latitude
    lon = message.location.longitude
    user_id = message.from_user.id

    query_type = user_last_query.get(user_id, "restaurant")
    await message.reply(f"–ò—â—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏: {query_type}‚Ä¶", reply_markup=main_kb)

    try:
        delta = 0.01
        left = lon - delta
        top = lat + delta
        right = lon + delta
        bottom = lat - delta

        url = (
            f"https://nominatim.openstreetmap.org/search?"
            f"q={query_type}&format=json&limit=5&"
            f"viewbox={left},{top},{right},{bottom}&bounded=1"
        )
        headers = {"User-Agent": "MoodBot"}
        async with httpx.AsyncClient() as session:
            response = await session.get(url, headers=headers)
            data = response.json()

        if not data:
            await message.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ üòï", reply_markup=main_kb)
            return

        for place in data:
            name = place.get("display_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            place_lat = place.get("lat")
            place_lon = place.get("lon")
            maps_url = f"https://www.openstreetmap.org/?mlat={place_lat}&mlon={place_lon}#map=18/{place_lat}/{place_lon}"
            text = f"üìç <b>{name}</b>\n<a href='{maps_url}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>"
            await message.reply(text, parse_mode="HTML", reply_markup=main_kb)

    except Exception:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ üòû", reply_markup=main_kb)
        logging.error("–û—à–∏–±–∫–∞:\n" + traceback.format_exc())

@dp.message_handler()
async def handle_text(message: types.Message):
    text = message.text.lower()
    user_id = message.from_user.id

    if "—Ä–µ—Å—Ç–æ—Ä–∞–Ω" in text:
        user_last_query[user_id] = "restaurant"
        await message.reply("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ —è –Ω–∞–π–¥—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º üìç", reply_markup=main_kb)
    elif "–∫–∏–Ω–æ" in text:
        user_last_query[user_id] = "cinema"
        await message.reply("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ —è –Ω–∞–π–¥—É –∫–∏–Ω–æ —Ä—è–¥–æ–º üìç", reply_markup=main_kb)
    elif "—Ç–µ–∞—Ç—Ä" in text:
        user_last_query[user_id] = "theatre"
        await message.reply("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ —è –Ω–∞–π–¥—É —Ç–µ–∞—Ç—Ä—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ üé≠", reply_markup=main_kb)
    elif "–º—É–∑–µ–π" in text:
        user_last_query[user_id] = "museum"
        await message.reply("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ —è –Ω–∞–π–¥—É –º—É–∑–µ–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ üñº", reply_markup=main_kb)
    elif "—Å–∫—É—á–Ω–æ" in text:
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏–∑ –º–µ–Ω—é!", reply_markup=main_kb)
    else:
        await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", reply_markup=main_kb)

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
