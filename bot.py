import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook
import openai
from dotenv import load_dotenv

# Load env variables
load_dotenv("mood_bot.env")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# Setup logging
logging.basicConfig(level=logging.INFO)

# Webhook settings (–≤—à–∏—Ç–æ –≤—Ä—É—á–Ω—É—é)
WEBHOOK_HOST = "https://mood-bot-frbb.onrender.com"
WEBHOOK_PATH = f"/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

# Init bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# Configure OpenRouter
openai.api_base = "https://openrouter.ai/api/v1"
openai.api_key = OPENROUTER_API_KEY

# Simple keyboard
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üçΩ –•–æ—á—É –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω"))
main_kb.add(KeyboardButton("üé¨ –ü–æ–π–¥—É –≤ –∫–∏–Ω–æ"))
main_kb.add(KeyboardButton("üé≠ –¢–µ–∞—Ç—Ä / –≤—ã—Å—Ç–∞–≤–∫–∞"))
main_kb.add(KeyboardButton("ü§∑‚Äç‚ôÇÔ∏è –ú–Ω–µ —Å–∫—É—á–Ω–æ"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)

@dp.message_handler()
async def handle_text(message: types.Message):
    user_text = message.text.lower()

    if "—Ä–µ—Å—Ç–æ—Ä–∞–Ω" in user_text:
        await message.reply("–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π... (–≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏)")
    elif "–∫–∏–Ω–æ" in user_text:
        await message.reply("–°–µ–π—á–∞—Å –≤ –∫–∏–Ω–æ: ¬´–î—é–Ω–∞ 2¬ª, ¬´–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä¬ª... (–≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏)")
    elif "—Ç–µ–∞—Ç—Ä" in user_text or "–≤—ã—Å—Ç–∞–≤–∫–∞" in user_text:
        await message.reply("–ê—Ñ–∏—à–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ... (–≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏)")
    else:
        try:
            response = openai.chat.completions.create(
                model="openai/gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–≤–µ—Ç—É—é—â–∏–π, –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ—Å—É–≥ –≤ –≥–æ—Ä–æ–¥–µ."},
                    {"role": "user", "content": user_text}
                ]
            )
            idea = response.choices[0].message.content
            await message.reply(idea)
        except Exception as e:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT üòï")
            import traceback
            logging.error("GPT error:\n" + traceback.format_exc())

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
